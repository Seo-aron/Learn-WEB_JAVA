

//예제 . 다운캐스팅 ? 

/*
   업캐스팅 단점
   - 업캐스팅으로 인한 부모클래스자료형 참조변수로 접근해서
      자식객체메모리 전체의 영역중에서 사용할수 있는 멤버의 범위가 작았다.
      즉 부모클래스내부에 작성된 멤버에만 접근이 가능했다.
   
   다운캐스팅?
   - 부모클래스 자료형의 참조변수에 저장된  자식객체 메모리전체(부모 멤버 + 자식멤버)의
     멤버들을 참조(접근 해서 사용)할수 있도록 
     자식클래스자료형의 참조변수 선언후 부모클래스자료형의 참조변수에 저장되어 있던
     자식객체 메모리 주소를 저장하는것.
	 예)
	     Parent p = new Child();  <- 업캐스팅
	     
	     Child c = (Child)p; <- 다운캐스팅
	     
	           c.parentPrn();
	           c.childPrn();
	           
	           c참조변수로는 생성된 new Child()객체 전체의 모든 멤버들에
	           접근해서 사용할수 있게됨
*/
class A{//부모
	int a,b;
}
class B extends A{//자식
  //상속받은 a,b가 여기에 존재함	
	int c;
}
public class Ex3 {
	public static void main(String[] args) {
		//업캐스팅
		//문법
		//    부모클래스자료형  참조변수 = new 자식클래스의생성자호출();
				A             a   = new B();
		/*		                           0x12
						    [0x12]= ------------------
                                       int a, b; <-부모클래스의 멤버
                                       int c; <-자식B클래스의 멤버
									------------------
		*/
				a.a = 10; //가능
				a.b = 20; //가능
		//		a.c = 30; //불가능 - 업캐스팅 단점
			
		//다운 캐스팅
        //문법
		//    자식클래스자료형 참조변수 = (자식클래스명)부모클래스자료형참조변수명;
				B          b     =        (B)a;
				
		//    다운캐스팅으로 인해 b참조변수로 접근해서 사용할수 있는 멤버의 갯수가 늘어남
				           b.a = 10;//가능
				           b.b = 20;//가능
				           b.c = 30;//가능    
		//참고. 다운캐스팅은 자식클래스자료형에 적었던 
	    //    B클래스 내부에 상속 포함한 모든 멤버들에 모두접근가능하게 한다.		           
				
				
				
				
	}

}











