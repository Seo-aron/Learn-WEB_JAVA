<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	
	
	<!-- 
		구글 SMTP서버와 연동해서 실습하므로 스프링의 JavaMailSenderImpl클래스를 이용해
		메일 서버와 관련된 정보를 설정하도록 작성 합니다.  
	
	 -->
	<bean id="mailSender" 
	   class="org.springframework.mail.javamail.JavaMailSenderImpl">
	
		<!-- 메일을 보냈을때 실제 수신자에게 메일을 보내는 host서버에 구글의 SMTP서버를 설정합니다. -->
		<property name="host" value="smtp.gmail.com" />
							<!--     smtp.naver.com" -->
							
		<!--  구글 SMTP 메일 서버의 포트번호는 465 또는 587 을 설정합니다 -->
		<property name="port" value="587" />
	
		<!--  자신의 구글 메일 계정과 비밀번호를 설정합니다 -->
		<property name="username" value="ssk3924@gmail.com" />
		<property name="password" value="wwqi oaer sjnf kpui"/>
	
		<!-- 
			 //위 final String password변수에 저장될 비밀번호 값은
		      //보안 수준이 낮은 앱의 액세스를 활성화한 계정에서는 사용자 이름과 비밀번호를 사용해서 
		      //Gmail SMTP와 같은 서드 파티 앱에 인증할 수 있었지만 
		      //이제는 사용자의 계정을 더 안전하게 보호하기 위해서 
		      //사용자 이름과 비밀번호를 사용해서 서드 파티 앱과 기기에 로그인 요청하는 것을 지원하지 않습니다. 
		      //이제는 Gmail SMTP 서버를 이용하기 위해서는 보안 수준이 높은 Gmail 계정을 만들고나서 
		      //사용자 이름과 비밀번호가 아닌 다른 방식(앱 비밀번호 를 생성해서 사용하는 방식)으로 인증을 요청해야만 합니다. 
		      
		      //참고
		      //https://kdevkr.github.io/gmail-smtp/ 
		
		 -->
	
	
<!--  

Spring Framework에서 JavaMailSenderImpl 빈을 설정할 때, 
javaMailProperties 속성을 이용하여 
JavaMail API의 javax.mail.Session 클래스에 전달될 속성들을 설정하는 방법 중 하나입니다.

	mail.transport.protocol: 
	이메일 전송에 사용할 프로토콜을 설정합니다. SMTP 프로토콜을 사용하도록 설정되어 있습니다.
	
	mail.smtp.auth: 
	SMTP 인증을 사용할지 여부를 설정합니다. 
	true로 설정되어 있으므로 SMTP 인증을 사용합니다.
	
	mail.smtp.starttls.enable: 
	TLS(Transport Layer Security) 보안 연결을 사용할지 여부를 설정합니다. 
	true로 설정되어 있으므로 TLS 보안 연결을 사용합니다.


참고. 
	Transport Layer Security (TLS)는 네트워크 통신에서 보안성을 제공하기 위한 프로토콜입니다. 
	TLS는 데이터를 암호화하고 인증하여 중간에 제3자가 데이터를 탈취하거나 변조하는 것을 방지합니다.

	TLS는 SSL (Secure Sockets Layer) 프로토콜의 업그레이드 버전으로, 
	SSL 프로토콜의 보안 취약점을 보완하고 기능을 개선한 것입니다. 
	TLS는 HTTPS, SMTPS, FTPS, IMAPS 등 다양한 프로토콜에서 사용되며, 
	암호화, 인증, 무결성 검증 등 다양한 보안 기능을 제공합니다.

	TLS는 클라이언트와 서버 간의 통신에서 사용됩니다. 
	TLS는 클라이언트와 서버 간의 암호화된 연결을 설정하고, 
	클라이언트와 서버 간의 모든 데이터를 암호화하여 전송합니다. 
	이를 통해 데이터의 안전성과 보안성을 보장할 수 있습니다.

	TLS의 최신 버전은 TLS 1.3입니다. 
	TLS 1.3은 기존 버전들의 보안 취약점을 보완하고, 
	암호화 알고리즘과 키 교환 방법 등을 개선하여 더욱 강력한 보안성을 제공합니다.




	
	mail.smtp.socketFactory.class: 
	SSL(Secure Sockets Layer) 보안 연결을 사용할 때, 사용할 소켓 팩토리 클래스를 설정합니다. 
	javax.net.ssl.SSLSocketFactory 클래스를 사용하도록 설정되어 있습니다.
	
	mail.debug: 
	디버그 정보를 출력할지 여부를 설정합니다. 
	true로 설정되어 있으므로 디버그 정보를 출력합니다.

-->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	
	</bean>
	
	<!-- 수신자에게 메일을 정기적으로 보내는 경우  송 수신 메일 주소와  제목을 미리 지정해서 보낼수 있게 설정 -->
	<bean id="preConfiguredMessage" 
	      class="org.springframework.mail.SimpleMailMessage">
	
		<property name="to" value="ssk3924@naver.com"></property>	<!-- 수신자 이메일 -->
		<property name="from" value="ssk3924@gmail.com"></property> <!-- 발신자 이메일 -->
		<property name="subject" value="테스트 메일제목입니다."/>  <!-- 보낼 메일 제목  -->
		
	
	</bean>
	
	<!-- 
		SimpleMailMessage클래스는 이메일 내용을 설정할수 있는 다른 속성들도 제공합니다
		
		이메일 내용은 setText()메소드를 이용하여 설정할수 있으며,
		CC, BCC, ReplyTo등의 속성도 설정할수 있습니다.
		
		이렇게 설정된 SimpleMailMessage객체는 JavaMailSender인터페이스를 구현한
		클래스의 send()메소드를 호출하여 전송할 수 있습니다. 
		
	
	 -->
	
	
	
	
		
</beans>






