<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!--  회원 기능 관련한 SQL문을 작성 해 놓는 member.xml(매퍼파일) -->
  
  
<!-- DAO에서 아래의 mapper태그 내부에 접근 하기 위해 mapper태그의 namespace 설정 -->  
<mapper namespace="mapper.member">  

	<!-- select문의 조회 결과를 저장할 객체를 설정!
		 type속성에 값으로 SqlMapConfig.xml설정파일에 
		 <typeAlias>태그에 작성해 놓은 MemberVO의 별칭 memberVO빈을 설정 하자.
	 
	 	MemberDAO의 selectList메소드 호출!
	 	select * from t_member order by joinDate desc 조회 후 
	 	조회한 여러줄 중 한줄 정보씩 MemberVO에 저장 후 List배열에 담아 반환
	 -->
	<resultMap id="memResult" type="memberVO" >
		
<!-- 		 property속성 값은  MemberVO의 변수명 -->
<!-- 			 column속성 값은 조회한 행의 열명 을 작성하면 매칭 되어 VO의 각 변수에 저장됩니다. -->
		 
		<result property="id" column="id"/>
		<result property="pwd" column="pwd"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="joinDate" column="joinDate"/>
		
	</resultMap>
	

<!-- 
		MemberDAO의 selectList메소드 호출!
	 	select * from t_member order by joinDate desc 조회 후 
	 	조회한 여러줄 중 한줄 정보씩 HashMap에 저장 후 List배열에 담아 반환
	 	
	<resultMap id="memResult" type="java.util.HashMap" >
		
			조회한 레코드를 지정한 컬럼이름을 key ,  값을 value로 해서 저장 
		
		<result property="id" column="id"/>
		<result property="pwd" column="pwd"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="joinDate" column="joinDate"/>
		
	</resultMap>
-->
<!-- <![CDATA[...]] 쿼리문의 >,< 등을 구분해주기 위해-->
	
	<!-- 
		id = "DAO에서 id값을 이용해 해당  SQL문을 호출하게 됩니다."
		resultMap = "select조회후 결과 데이터를 담을 객체를 설정하는 태그 작성"
	 -->
	<select id="selectAllMemberList" resultMap="memResult">
		<![CDATA[
			select * from t_member order by joinDate desc 
		]]>
	</select>  
  
  
    
    <!-- id가 hone인 회원의 이름 조회  
    	 DAO에서 아래의 select문장을 실행 호출 하겠죠?
    	 SqlSession객체의 selectOne메소드를 이용하겠죠?
    	 조회한 이름은 문자열이기떄문에 resultType속성의 값을 String으로 작성해준다.
    -->
  	
  	<select id="selectName"  resultType="String">
  		<![CDATA[
  			select name from t_member
  			where id = 'hong'
  		]]>
  	</select>
  	
   	<select id="selectPwd"  resultType="int">
  		<![CDATA[
  			select pwd from t_member
  			where id = 'hong'
  		]]>
  	</select>
  
  
   <!-- 입력한 아이디를 이용해 회원을 조회하는 SELECT -->
   <!--  parameterType속성에는 값으로 MemberDAO파일에서 selectOne메소드 호출시 전달되는 값의 타입을 적어준다 -->
   <!--  resultType속성에는 값으로 조회된 한행(레코드)를 MembeVO객체의 각변수에 저장하기 위해  memberVO별칭을 적어준다 -->	
  	<select id="selectMemberById" parameterType="String" resultType="memberVO">
  		<![CDATA[
  			select * from t_member where id = #{id}
  		]]>
  	</select>
  
  
  	<select id="selectMemberByPwd" parameterType="int"  resultMap="memResult">
  		<![CDATA[
  			select * from t_member where pwd = #{pwd}
  		]]>
  	</select>
  
  
  	<!-- #{MemberVO의 변수명 } -->
  	<insert id="insertMember" parameterType="memberVO">
  		<![CDATA[
  			insert into t_member(id,pwd,name,email)
  			values(#{id},#{pwd},#{name},#{email})
  		]]>
  	</insert>
  
   	<!-- #{MemberVO의 변수명 } -->
  	<insert id="insertMember2" parameterType="java.util.HashMap">
  		<![CDATA[
  			insert into t_member(id,pwd,name,email)
  			values(#{id},#{pwd},#{name},#{email})
  		]]>
  	</insert>
  	
  	
	<!-- #{MemberVO의 변수명 } -->
  	<update id="updateMember" parameterType="memberVO">
  		<![CDATA[
  			update t_member 
  			set pwd=#{pwd}, name=#{name}, email=#{email}
  			where id=#{id} 
  		]]>
  	</update>
  	
  	<!-- #{MememberDAO클래스의 deleteMember(String id)의 매개변수명 id 작성} -->
  	<delete id="deleteMember" parameterType="String">
	  	<![CDATA[
	  		delete from t_member 
	  		where id=#{id}  	
	  	]]>
  	</delete>
  	
  	<!-- 
  	
  	동적 SQL문 작성 태그
  	
 	<if></if>
 	
 	문법
 		select * from 테이블명 
 		<where>
 			<if test="조건식">
 				조건식에 만족하면 where뒤에 붙일 SQL문장 
 			</if>
 		</where> 	
  	
  	
  	
  	
  		<![CDATA[
  			select * from t_member  <- 공통으로 사용하는 SQL문입니다. 
  		]]>
  		<where>		<- <where>태그를 이용해 SQL문의 where절을 표현합니다. 
  		
  			첫번째 <if>태그는 parameterType속성의 memberVO객체의 name변수로 전달된 값이 있으면
  			select문에 이름으로 조회 하는 내용입니다.
  			
  			두번째 <if>태그는 parameterType속성의 memberVO객체의 email변수로 전달된 값이 있으면
  			select문에 입력한 이메일로 조회하는 내용이 추가 됩니다. 
  		
  		</where>
  	 -->
  	<!--  	
  	<select id="searchMember" parameterType="memberVO"  resultMap="memResult">
 		<![CDATA[
  			select * from t_member  
  		]]>
  		<where>
  			
  			name변수 값을 체크해 저장되어 있다면?(이름을 입력했다면?) 추가할 SQL문 
  			
  			<if test="name != '' and name != null">
  				name=#{name}
  			</if>
  			
  			 email변수 값을 체크해 저장되어 있다면?(이메일을 입력했다면?) 추가될  SQL문 
  			
  			<if test="email != '' and email != null">
  				and email=#{email}
  			</if>
  		
  		</where>
  		order by joinDate desc
  	
  	</select>
  	 -->
  	
 <!-- 
   	동적 SQL문 작성 태그
		
	select * from 테이블명 
	<where>	
		<choose> 
			<when test="조건식1"> 조건식1에 만족하면 붙일 SQL문장 </when>
			<when test="조건식2"> 조건식2에 만족하면 붙일 SQL문장 </when>
			...
			<otherwise> 위 when태그의조건식에 모두 만족하지 않으면 붙일 SQL문장 </otherwise>	
		</choose>
 	</where>
 
  --> 	
  	
  	<!-- 공통으로 사용되는 SQL문을 미리 <sql>태그 안에 만들어 놓는다. -->
  	<sql id="a">
  		<![CDATA[
  			select * from t_member  
  		]]>
  	</sql>
  	
  	
 	<select id="searchMember" parameterType="memberVO"  resultMap="memResult">
 		
 		<!-- <sql>태그 내부에 작성된 공통으로 사용되는 SQL문을 현재 위치에 포함시키자. -->
 		<include refid="a"/>
 		
  		<where>
  			<choose>
				<!-- 이름과 이메일을 모두 입력했을 경우  -->
				<when test="name != '' and name != null and email != '' and email != null">
					name=#{name} and email=#{email}
				</when>  		
					
				<!-- 이름만 입력했을 경우 -->
				<when test="name != '' and name != null">
					name=#{name}
				</when>  	
										  			
				<!-- 이메일만 입력했을 경우  -->
				<when test="email != '' and email != null">
					email=#{email}
				</when>  			
					
  			</choose>
  		</where>
  		order by joinDate desc
  	
  	</select>
  	
  	
  	<select id="foreachSelect" parameterType="java.util.List" resultMap="memResult" >
  		
  		<!-- <sql>태그 내부에 작성된 공통으로 사용되는 SQL문을 현재 위치에 포함시키자. -->
 		<include refid="a"/>
 		
  		where name in
  		<foreach item="item"  collection="list" open="("  separator="," close=")" >
  			#{item}
  		</foreach>
  	    order by joinDate desc
  	</select>
  	
<!--   	select * from t_member -->
<!-- 	where name in('홍길동','이순신','차범근') order by joinDate desc; -->
<!-- 					0       1      2 -->
  
  <!-- 
  		<forEach>태그로 회원 정보 추가하기
  		
  		MySQL  참고
  		
  		<insert id="foreachInsert" parameterType="java.util.List">
  			
  			INSERT INTO t_member(id, pwd, name, email)
  			VALUES
  			
  			<foreach  item="vo"  collection="list">
  				(#{vo.id},
  				 #{vo.pwd},
  				 #{vo.name},
  				 #{vo.email})
  			</foreach>
  		
  		</insert>
   -->
   <insert id="foreachInsert"  parameterType="java.util.List">
   
   		<foreach item="item" collection="list" open="INSERT ALL" separator=" " close="SELECT * from dual">
   		
   			INTO t_member(id, pwd, name, email)
   			VALUES(#{item.id}, #{item.pwd}, #{item.name}, #{item.email} )
   		
   		</foreach>
   
   </insert>
   
<!--INSERT ALL
  		INTO t_member(id, pwd, name, email)
		VALUES(#{item.id}, #{item.pwd}, #{item.name}, #{item.email} )
		
		INTO t_member(id, pwd, name, email)
 		VALUES(#{item.id}, #{item.pwd}, #{item.name}, #{item.email} )
  
 		INTO t_member(id, pwd, name, email)
 		VALUES(#{item.id}, #{item.pwd}, #{item.name}, #{item.email} ) 
    SELECT * from dual
  
주제  : <sql>태그와 <include>태그로 SQL문 중복 제거  
	
	select * from t_member  중복되는 구문을 미리 만들어 놓고 include포함해서 사용할수 있다.	
	
주제 : 마이바티스에서  오라클의 like연산자로 검색할때  '%'기호와 조건값 사이에 반드시 || 기호를
          사용해서 연결해 주어야 합니다. 
	
	select * from t_member 
	where name like '%' #{name} '%'     <- 잘못된것임 오류 발생 
	
	select * from t_member 
	where name like '%' || #{name} || '%'     <- 잘된것임  	
	
	
	https://mybatis.org/mybatis-3/ko/dynamic-sql.html
	마이바티스 참고문서 (한글 번역 되어 있음)
	
-->
    
	<!-- 로그인창에서 입력한 ID와 비밀번호로 회원정보를 조회하는 SQL문  -->
	<select id="loginById" parameterType="memberVO" resultType="memberVO">
		<![CDATA[
			select * from t_member where id = #{id} and pwd = #{pwd} 
		]]>
	</select>   
    
    
    
    
    
    
</mapper> 




  
  
  
  
  